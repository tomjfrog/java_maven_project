# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: read # for detecting the Github Actions environment.
      security-events: write # Required for uploading code scanning
      id-token: write

    steps:
    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        # JFrog Platform url
        JF_URL: ${{ vars.JF_URL }} # or 'https://acme.jfrog.io'
        JF_USER: ${{ secrets.JF_USER }}
        JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
        # JFrog Platform access token
        #JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
    - run: |
        jf rt ping
        jf --version
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - name: Maven JF Setup 
      run: |
        jf mvnc \
        --repo-resolve-releases mavencentral-remote \
        --repo-resolve-snapshots mavencentral-remote \
        --repo-deploy-releases mvn-libs-snapshot \
        --repo-deploy-snapshots mvn-libs-snapshot
    - name: maven install
      run: |
        jf mvn install -f pom.xml --build-name "${{ github.repository }}" --build-number ${{ github.run_number }}

    - name: Scan Artifact
      run: |
        jf scan ./target/*.jar

    - name: publish build info
      run: |
        jf rt build-collect-env  ${{ github.repository }} ${{ github.run_number }}
        jf rt build-add-git ${{ github.repository }} ${{ github.run_number }}
        jf rt build-publish ${{ github.repository }} ${{ github.run_number }}

    - name: build scan
      run: |            
        jf build-scan --fail=false ${{ github.repository }} ${{ github.run_number }}